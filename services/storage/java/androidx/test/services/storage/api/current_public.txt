// Signature format: 3.0
package androidx.test.services.storage {

  public final class TestStorage implements androidx.test.platform.io.PlatformTestStorage {
    ctor public TestStorage();
    ctor public TestStorage(android.content.ContentResolver);
    method public void addOutputProperties(java.util.Map<java.lang.String!,java.io.Serializable!>!);
    method public String! getInputArg(String);
    method public java.util.Map<java.lang.String!,java.lang.String!>! getInputArgs();
    method public android.net.Uri! getInputFileUri(String);
    method public android.net.Uri! getOutputFileUri(String);
    method public java.util.Map<java.lang.String!,java.io.Serializable!>! getOutputProperties();
    method public boolean isTestStorageFilePath(String);
    method public java.io.InputStream! openInputFile(String) throws java.io.FileNotFoundException;
    method public java.io.OutputStream! openOutputFile(String) throws java.io.FileNotFoundException;
    method public java.io.OutputStream! openOutputFile(String, boolean) throws java.io.FileNotFoundException;
  }

  @androidx.test.annotation.ExperimentalTestApi public final class TestStorageConstants {
    field public static final String INTERNAL_USE_PROVIDER_AUTHORITY = "androidx.test.services.storage._internal_use_files";
    field public static final String ON_DEVICE_FIXTURE_SCRIPTS = "googletest/fixture_scripts/";
    field public static final String ON_DEVICE_PATH_INTERNAL_USE = "googletest/internal_use/";
    field public static final String ON_DEVICE_PATH_ROOT = "googletest/";
    field public static final String ON_DEVICE_PATH_TEST_OUTPUT = "googletest/test_outputfiles/";
    field public static final String ON_DEVICE_PATH_TEST_PROPERTIES = "googletest/test_exportproperties/";
    field public static final String ON_DEVICE_TEST_RUNFILES = "googletest/test_runfiles/";
    field public static final String OUTPUT_PROPERTIES_PROVIDER_AUTHORITY = "androidx.test.services.storage.properties";
    field public static final String TEST_ARGS_FILE_NAME = "test_args.dat";
    field public static final String TEST_ARGS_PROVIDER_AUTHORITY = "androidx.test.services.storage.testargs";
    field public static final String TEST_OUTPUT_PROVIDER_AUTHORITY = "androidx.test.services.storage.outputfiles";
    field public static final String TEST_RUNFILES_PROVIDER_AUTHORITY = "androidx.test.services.storage.runfiles";
  }

  @androidx.test.annotation.ExperimentalTestApi public class TestStorageException extends java.lang.RuntimeException {
    ctor public TestStorageException(String!);
    ctor public TestStorageException(String!, Throwable!);
  }

}

package androidx.test.services.storage.file {

  @androidx.test.annotation.ExperimentalTestApi public final class HostedFile {
    method public static android.net.Uri! buildUri(androidx.test.services.storage.file.HostedFile.FileHost!, String!);
    method public static java.io.File! getInputRootDirectory(android.content.Context!);
    method public static java.io.File! getOutputRootDirectory(android.content.Context!);
  }

  public enum HostedFile.FileHost {
    method public String! getAuthority();
    method public boolean isWritable();
    enum_constant public static final androidx.test.services.storage.file.HostedFile.FileHost EXPORT_PROPERTIES;
    enum_constant public static final androidx.test.services.storage.file.HostedFile.FileHost INTERNAL_USE_ONLY;
    enum_constant public static final androidx.test.services.storage.file.HostedFile.FileHost OUTPUT;
    enum_constant public static final androidx.test.services.storage.file.HostedFile.FileHost TEST_FILE;
  }

  public enum HostedFile.FileType {
    method public static androidx.test.services.storage.file.HostedFile.FileType! fromTypeCode(String!);
    method public String! getTypeCode();
    enum_constant public static final androidx.test.services.storage.file.HostedFile.FileType DIRECTORY;
    enum_constant public static final androidx.test.services.storage.file.HostedFile.FileType FILE;
  }

  public enum HostedFile.HostedFileColumn {
    method public int getAndroidType();
    method public String! getColumnName();
    method public static String![]! getColumnNames();
    method public Class<?>! getColumnType();
    method public int getPosition();
    enum_constant public static final androidx.test.services.storage.file.HostedFile.HostedFileColumn DATA;
    enum_constant public static final androidx.test.services.storage.file.HostedFile.HostedFileColumn DISPLAY_NAME;
    enum_constant public static final androidx.test.services.storage.file.HostedFile.HostedFileColumn NAME;
    enum_constant public static final androidx.test.services.storage.file.HostedFile.HostedFileColumn SIZE;
    enum_constant public static final androidx.test.services.storage.file.HostedFile.HostedFileColumn SIZE_2;
    enum_constant public static final androidx.test.services.storage.file.HostedFile.HostedFileColumn TYPE;
  }

  @androidx.test.annotation.ExperimentalTestApi public final class PropertyFile {
    method public static android.net.Uri! buildUri(androidx.test.services.storage.file.PropertyFile.Authority!);
    method public static android.net.Uri! buildUri(androidx.test.services.storage.file.PropertyFile.Authority!, String!);
  }

  public enum PropertyFile.Authority {
    method public String! getAuthority();
    enum_constant public static final androidx.test.services.storage.file.PropertyFile.Authority TEST_ARGS;
  }

  public enum PropertyFile.Column {
    method public String! getName();
    method public static String![]! getNames();
    method public int getPosition();
    enum_constant public static final androidx.test.services.storage.file.PropertyFile.Column NAME;
    enum_constant public static final androidx.test.services.storage.file.PropertyFile.Column VALUE;
  }

}

